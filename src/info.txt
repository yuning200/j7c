2014-06-12 lvyj

1,我们将实现一个有两个线程访问共同对象的示例。我们将有一个银行帐户和两个线程：其中一个线程将钱转移到帐户而另一个线程将从账户中扣款。
	在没有同步方法，我们可能得到不正确的结果。同步机制保证了账户的正确。

2,编程模拟一家电影院有两个屏幕和两个售票处。当一个售票处出售门票，它们用于两个电影院的其中一个，但不能用于两个，
	所以在每个电影院的免费席位的数量是独立的属性

3,经典问题是生产者与消费者问题

4,通过锁来同步代码块和通过Lock接口及其实现者ReentrantLock类来创建临界区，实现一个程序来模拟打印队列。

2014-06-13 lvyj

5,使用ReadWriteLock接口实现一个程序，使用它来控制访问一个存储两个产品价格的对象
	PricesInfo类，用它来存储两个产品价格的信息，实现设置价格和获取价格
	Reader类 ，将价格打印到控制台。读取10次。
	Writer类，修改价格，两个价格同时修改。修改3次，设置为随即数(Math.random()*10, Math.random()*8)
	Main ，5个线程获取价格，1个线程修改价格。
	
6，Lock的公平性，观察公平与非公平模式之间的差别
	打印机打印文档：
		PrintQueue：打印类 printJob() 方法内打印两次，一个线程获取2次锁。
		Main，10个线程测试，两个线程相隔100ms启动。
		修改锁的公平行在观察结果
		
7，Lock中使用多个条件(Condition)
 	背景：生产者与消费者是经典的问题。我们有一个数据缓冲区，一个或多个数据生产者往缓冲区存储数据，
	一个或多个数据消费者从缓冲区中取出数据
	FileMock类，模拟文件。String，content(将存储文件内容);int,index(被检索到的模拟文件的行数).
	Buffer类，用来实现在生产者与消费者之间共享的缓冲区。insert(),get()
	Producer：生产者
	Consumer：消费者
			
	

